const mongoose = require('mongoose');

const stockMasterItemSchema = new mongoose.Schema({
  // Root-level fields
  vendor: { type: String },
  purchaseOrderNo: { type: String },
  purchaseOrderDate: { type: String },
  vendorNo: { type: String },
  currency: { type: String },
  customerContact: { type: String },
  buyerName: { type: String },
  buyerEmail: { type: String },
  buyerTelephone: { type: String },
  otherReference: { type: String },
  contractOrOfferNo: { type: String },
  customerProjRef: { type: String },
  termsOfPayment: { type: String },
  incoterm: { type: String },
  incotermLocation: { type: String },
  deliveryDate: { type: String },
  goodsMarked: { type: String },
  billTo: { type: String },
  shipTo: { type: String },
  vendorContact: { type: String },
  vendorEmail: { type: String },
  vendorTelephone: { type: String },
  vendorName: { type: String },
  taxId: { type: String },
  totalNetValue: { type: String },
  additionalInformation: { type: String },
  allowanceAmount: { type: String },
  allowances: { type: String },
  projectNumber: { type: String },
  salesOrderNr: { type: String },
  salesOrderItemNr: { type: String },
  // Item-level fields (for single item, for compatibility)
  itemCode: { type: String, unique: true, sparse: true  }, 
  name: { type: String },
  description: { type: String },
  materialNumber: { type: String },
  materialDescription: { type: String },
  quantity: { type: String },
  quantityUnit: { type: String },
  pricePerUnit: { type: String },
  netPrice: { type: String },
  totalWeight: { type: String },
  totalPrice: { type: String },
  poDeliveryDate: { type: String },
  hsnCode: { type: String },
  gstRate: { type: String },
  alias: { type: String },
  mfgDate: { type: String },
  expiryDate: { type: String },
  embedding: { type: [Number] },
  createdAt: { type: Date, default: Date.now }
});

module.exports = mongoose.model('StockMasterItem', stockMasterItemSchema); 